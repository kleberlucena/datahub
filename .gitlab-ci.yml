image: docker:20.10.17


# Enable docker-in-docker communication
services:
  - docker:20.10.7-dind


variables:
  # Variáveis de ambiente que começam com $CI_ são disponibilizadas pelo Gitlab
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CACHE_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest


# Debug para verificar se o docker está funcinando corretamente no runner
before_script:
  - docker info
  - echo "Image tag ${IMAGE_TAG}"
  - echo "Cache image tag ${CACHE_IMAGE_TAG}"

stages:
  - build
  - test
  - deploy
  - cleanup


build image:
  stage: build
  tags:
    - stage
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CACHE_IMAGE_TAG || true
    - docker build --cache-from $CACHE_IMAGE_TAG --tag $IMAGE_TAG --tag $CACHE_IMAGE_TAG .
    - docker push $IMAGE_TAG
    - docker push $CACHE_IMAGE_TAG


run tests:
  extends: .server_access_granted
  stage: test
  needs: ["build image"]
  tags:
    - stage
  environment:
    name: test
    url: https://bacinf.stage.pm.pb.gov.br
  variables:
    APP_FOLDER: "test"
    COMPOSE_FILE: "docker-compose.test.yml"
    SERVER_IP: $STAGE_SERVER_IP
    SERVER_PRIVATE_KEY: $STAGE_SERVER_PRIVATE_KEY
    APP_FOLDER_NAME: test
  script:
    - ssh root@$SERVER_IP "mkdir -p $APP_FOLDER"
    - scp -r ./$COMPOSE_FILE root@$SERVER_IP:~/$APP_FOLDER/docker-compose.yml
    - scp -r ./Dockerfile root@$SERVER_IP:~/$APP_FOLDER/Dockerfile
    - >
      ssh root@$SERVER_IP << ENDSSH
        cd $APP_FOLDER
        export IMAGE_TAG=${IMAGE_TAG}
        export STAGE_DJANGO_SECRET_KEY=${STAGE_DJANGO_SECRET_KEY}
        export STAGE_DJANGO_SITE_ID=${STAGE_DJANGO_SITE_ID}
        export STAGE_DB_NAME=${STAGE_DB_NAME}
        export STAGE_DB_USER=${STAGE_DB_USER}
        export STAGE_DB_PASSWORD=${STAGE_DB_PASSWORD}
        export STAGE_DB_HOST=${STAGE_DB_HOST}
        export STAGE_DB_PORT=${STAGE_DB_PORT}
        export STAGE_MINIO_ENDPOINT=${STAGE_MINIO_ENDPOINT}
        export STAGE_MINIO_EXTERNAL_ENDPOINT=${STAGE_MINIO_EXTERNAL_ENDPOINT}
        export STAGE_MINIO_ACCESS_KEY=${STAGE_MINIO_ACCESS_KEY}
        export STAGE_MINIO_SECRET_KEY=${STAGE_MINIO_SECRET_KEY}
        export STAGE_KEYCLOAK_ACCOUNT_LOGOUT_REDIRECT_URL=${STAGE_KEYCLOAK_ACCOUNT_LOGOUT_REDIRECT_URL}
        export STAGE_KEYCLOAK_REALM=${STAGE_KEYCLOAK_REALM}
        export STAGE_KEYCLOAK_URL=${STAGE_KEYCLOAK_URL}
        export STAGE_CELERY_BROKER_URL=${STAGE_CELERY_BROKER_URL}
        export STAGE_CELERY_RESULT_BACKEND=${STAGE_CELERY_RESULT_BACKEND}
        export STAGE_GRAYLOG_HTTP_ENDPOINT=${STAGE_GRAYLOG_HTTP_ENDPOINT}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_KEY=${STAGE_SOCIAL_AUTH_KEYCLOAK_KEY}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_SECRET=${STAGE_SOCIAL_AUTH_KEYCLOAK_SECRET}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_PUBLIC_KEY=${STAGE_SOCIAL_AUTH_KEYCLOAK_PUBLIC_KEY}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_AUTHORIZATION_URL=${STAGE_SOCIAL_AUTH_KEYCLOAK_AUTHORIZATION_URL}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_ACCESS_TOKEN_URL=${STAGE_SOCIAL_AUTH_KEYCLOAK_ACCESS_TOKEN_URL}
        export STAGE_CELERY_BROKER_URL=${STAGE_CELERY_BROKER_URL}
        export STAGE_CELERY_RESULT_BACKEND=${STAGE_CELERY_RESULT_BACKEND}
        export STAGE_GRAYLOG_HTTP_ENDPOINT=${STAGE_GRAYLOG_HTTP_ENDPOINT}
        export STAGE_PORTAL_TOKEN=${STAGE_PORTAL_TOKEN}
        export STAGE_PORTAL_URL_BASE=${STAGE_PORTAL_URL_BASE}
        export STAGE_WATERMARK_HOST=${STAGE_WATERMARK_HOST}
        export STAGE_WATERMARK_SECRET=${STAGE_WATERMARK_SECRET}

        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        docker-compose down
        docker system prune --all --force
        docker-compose pull
        docker-compose up --abort-on-container-exit --exit-code-from app
      ENDSSH


deploy stage:
  stage: deploy
  extends: .deploy_template
  needs: [ "run tests" ]
  tags:
    - stage
  environment:
    name: stage
    url: https://bacinf.stage.pm.pb.gov.br
  variables:
    APP_FOLDER: "stage"
    COMPOSE_FILE: "docker-compose.stage.yml"
    SERVER_IP: $STAGE_SERVER_IP
    SERVER_PRIVATE_KEY: $STAGE_SERVER_PRIVATE_KEY
    APP_FOLDER_NAME: stage


deploy prod:
  extends: .deploy_template
  stage: deploy
  needs: ["deploy stage"]
  when: manual
  tags:
    - docker
    - pmpb
  only:
    - main
  environment:
    name: production
    url: https://bacinf.apps.pm.pb.gov.br
  variables:
    APP_FOLDER: "prod"
    COMPOSE_FILE: "docker-compose.prod.yml"
    SERVER_IP: $PROD_SERVER_IP
    SERVER_PRIVATE_KEY: $PROD_SERVER_PRIVATE_KEY
    APP_FOLDER_NAME: app


# Remove containers e limpa arquivos criados pelo deploy
# ATENÇÃO:
# Esse build step é um caminho sem volta.
undeploy stage:
  extends: .deploy_template
  stage: cleanup
  needs: ["deploy stage"]
  when: manual
  tags:
    - docker
    - pmpb
  environment:
    name: stage
  variables:
    COMPOSE_FILE: "docker-compose.stage.yml"
    SERVER_IP: $STAGE_SERVER_IP
    SERVER_PRIVATE_KEY: $STAGE_SERVER_PRIVATE_KEY
  script:
    - >
      ssh root@$SERVER_IP << ENDSSH
        cd app
        export IMAGE_TAG=${IMAGE_TAG}
        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        docker-compose stop
        docker-compose down -v
        docker system prune --all --volumes --force
        cd ..
        rm -rf app
      ENDSSH


# Da acesso ao servidor que queremos acessar via SSH
.server_access_granted:
  before_script:
    - mkdir -p ~/.ssh
    - echo "${SERVER_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - echo "IP do servidor - ${SERVER_IP}"
    - ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts


# Template de execução de deploy de containers Docker em servidores remotos.
# Outros build steps podem usar esse template e sobreesecrever variáveis
.deploy_template:
  extends: .server_access_granted
  tags:
    - stage
  script:
    - ssh root@$SERVER_IP "mkdir -p $APP_FOLDER"
    - scp -r ./$COMPOSE_FILE root@$SERVER_IP:~/$APP_FOLDER/docker-compose.yml
    - scp -r ./Dockerfile root@$SERVER_IP:~/$APP_FOLDER/Dockerfile
    - >
      ssh root@$SERVER_IP << ENDSSH
        cd $APP_FOLDER
        export IMAGE_TAG=${IMAGE_TAG}
        export PROD_DJANGO_SECRET_KEY=${PROD_DJANGO_SECRET_KEY}
        export PROD_DJANGO_SITE_ID=${PROD_DJANGO_SITE_ID}
        export PROD_DB_NAME=${PROD_DB_NAME}
        export PROD_DB_USER=${PROD_DB_USER}
        export PROD_DB_PASSWORD=${PROD_DB_PASSWORD}
        export PROD_DB_HOST=${PROD_DB_HOST}
        export PROD_DB_PORT=${PROD_DB_PORT}
        export PROD_MINIO_ENDPOINT=${PROD_MINIO_ENDPOINT}
        export PROD_MINIO_EXTERNAL_ENDPOINT=${PROD_MINIO_EXTERNAL_ENDPOINT}
        export PROD_MINIO_ACCESS_KEY=${PROD_MINIO_ACCESS_KEY}
        export PROD_MINIO_SECRET_KEY=${PROD_MINIO_SECRET_KEY}
        export PROD_KEYCLOAK_ACCOUNT_LOGOUT_REDIRECT_URL=${PROD_KEYCLOAK_ACCOUNT_LOGOUT_REDIRECT_URL}
        export PROD_KEYCLOAK_REALM=${PROD_KEYCLOAK_REALM}
        export PROD_KEYCLOAK_URL=${STAGE_KEYCLOAK_URL}
        export PROD_SOCIAL_AUTH_KEYCLOAK_KEY=${PROD_SOCIAL_AUTH_KEYCLOAK_KEY}
        export PROD_SOCIAL_AUTH_KEYCLOAK_SECRET=${PROD_SOCIAL_AUTH_KEYCLOAK_SECRET}
        export PROD_SOCIAL_AUTH_KEYCLOAK_PUBLIC_KEY=${PROD_SOCIAL_AUTH_KEYCLOAK_PUBLIC_KEY}
        export PROD_SOCIAL_AUTH_KEYCLOAK_AUTHORIZATION_URL=${PROD_SOCIAL_AUTH_KEYCLOAK_AUTHORIZATION_URL}
        export PROD_SOCIAL_AUTH_KEYCLOAK_ACCESS_TOKEN_URL=${PROD_SOCIAL_AUTH_KEYCLOAK_ACCESS_TOKEN_URL} 
        export PROD_KEYCLOAK_URL=${PROD_KEYCLOAK_URL}
        export PROD_CELERY_BROKER_URL=${PROD_CELERY_BROKER_URL}
        export PROD_CELERY_RESULT_BACKEND=${PROD_CELERY_RESULT_BACKEND}
        export PROD_GRAYLOG_HTTP_ENDPOINT=${PROD_GRAYLOG_HTTP_ENDPOINT}
        export PROD_PORTAL_TOKEN=${PROD_PORTAL_TOKEN}
        export PROD_PORTAL_URL_BASE=${PROD_PORTAL_URL_BASE}
        export PROD_WATERMARK_HOST=${PROD_WATERMARK_HOST}
        export PROD_WATERMARK_SECRET=${PROD_WATERMARK_SECRET}
        export STAGE_DJANGO_SECRET_KEY=${STAGE_DJANGO_SECRET_KEY}
        export STAGE_DJANGO_SITE_ID=${STAGE_DJANGO_SITE_ID}
        export STAGE_DB_NAME=${STAGE_DB_NAME}
        export STAGE_DB_USER=${STAGE_DB_USER}
        export STAGE_DB_PASSWORD=${STAGE_DB_PASSWORD}
        export STAGE_DB_HOST=${STAGE_DB_HOST}
        export STAGE_DB_PORT=${STAGE_DB_PORT}
        export STAGE_MINIO_ENDPOINT=${STAGE_MINIO_ENDPOINT}
        export STAGE_MINIO_EXTERNAL_ENDPOINT=${STAGE_MINIO_EXTERNAL_ENDPOINT}
        export STAGE_MINIO_ACCESS_KEY=${STAGE_MINIO_ACCESS_KEY}
        export STAGE_MINIO_SECRET_KEY=${STAGE_MINIO_SECRET_KEY}
        export STAGE_KEYCLOAK_ACCOUNT_LOGOUT_REDIRECT_URL=${STAGE_KEYCLOAK_ACCOUNT_LOGOUT_REDIRECT_URL}
        export STAGE_KEYCLOAK_REALM=${STAGE_KEYCLOAK_REALM}
        export STAGE_KEYCLOAK_URL=${STAGE_KEYCLOAK_URL}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_KEY=${STAGE_SOCIAL_AUTH_KEYCLOAK_KEY}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_SECRET=${STAGE_SOCIAL_AUTH_KEYCLOAK_SECRET}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_PUBLIC_KEY=${STAGE_SOCIAL_AUTH_KEYCLOAK_PUBLIC_KEY}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_AUTHORIZATION_URL=${STAGE_SOCIAL_AUTH_KEYCLOAK_AUTHORIZATION_URL}
        export STAGE_SOCIAL_AUTH_KEYCLOAK_ACCESS_TOKEN_URL=${STAGE_SOCIAL_AUTH_KEYCLOAK_ACCESS_TOKEN_URL}        
        export STAGE_CELERY_BROKER_URL=${STAGE_CELERY_BROKER_URL}
        export STAGE_CELERY_RESULT_BACKEND=${STAGE_CELERY_RESULT_BACKEND}
        export STAGE_GRAYLOG_HTTP_ENDPOINT=${STAGE_GRAYLOG_HTTP_ENDPOINT}
        export STAGE_PORTAL_TOKEN=${STAGE_PORTAL_TOKEN}
        export STAGE_PORTAL_URL_BASE=${STAGE_PORTAL_URL_BASE}
        export STAGE_WATERMARK_HOST=${STAGE_WATERMARK_HOST}
        export STAGE_WATERMARK_SECRET=${STAGE_WATERMARK_SECRET}

        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        docker-compose down
        docker system prune --all --force
        docker-compose pull
        docker-compose up -d
      ENDSSH